# Script de test pour l'architecture microservices
Write-Host "üöÄ D√©marrage de l'architecture microservices..." -ForegroundColor Green

# Arr√™ter les conteneurs existants
Write-Host "üì¶ Arr√™t des conteneurs existants..." -ForegroundColor Yellow
docker-compose down

# Construire et d√©marrer les services
Write-Host "üèóÔ∏è Construction et d√©marrage des services..." -ForegroundColor Yellow
docker-compose up --build -d

# Attendre que les services soient pr√™ts
Write-Host "‚è≥ Attente du d√©marrage des services..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# V√©rifier l'√©tat des services
Write-Host "üîç V√©rification de l'√©tat des services..." -ForegroundColor Yellow

Write-Host "üìä User Service Health Check:" -ForegroundColor Cyan
try {
    $userHealth = Invoke-RestMethod -Uri "http://localhost:8082/api/health" -Method Get
    Write-Host ($userHealth | ConvertTo-Json) -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification du User Service: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìä Account Service Health Check:" -ForegroundColor Cyan
try {
    $accountHealth = Invoke-RestMethod -Uri "http://localhost:8081/api/health" -Method Get
    Write-Host ($accountHealth | ConvertTo-Json) -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de l'Account Service: $($_.Exception.Message)" -ForegroundColor Red
}

# Tests de base
Write-Host "`nüß™ Tests de base..." -ForegroundColor Yellow

Write-Host "1Ô∏è‚É£ Cr√©ation d'un utilisateur (devrait cr√©er automatiquement un compte bancaire):" -ForegroundColor Cyan

$userData = @{
    name = "John Doe"
    first_name = "John"
    email = "john@example.com"
    phone = "+33123456789"
    password = "password123"
} | ConvertTo-Json

try {
    $userResponse = Invoke-RestMethod -Uri "http://localhost:8082/api/users" -Method Post -Body $userData -ContentType "application/json"
    Write-Host ($userResponse | ConvertTo-Json) -ForegroundColor Green
    $userId = $userResponse.data.id

    if ($userId) {
        Write-Host "`n2Ô∏è‚É£ V√©rification du compte bancaire cr√©√© automatiquement:" -ForegroundColor Cyan
        try {
            $accountResponse = Invoke-RestMethod -Uri "http://localhost:8081/api/accounts/user/$userId" -Method Get
            Write-Host ($accountResponse | ConvertTo-Json) -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Compte bancaire non trouv√©: $($_.Exception.Message)" -ForegroundColor Red
        }

        Write-Host "`n3Ô∏è‚É£ Liste de tous les comptes bancaires:" -ForegroundColor Cyan
        try {
            $allAccounts = Invoke-RestMethod -Uri "http://localhost:8081/api/accounts" -Method Get
            Write-Host ($allAccounts | ConvertTo-Json) -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur lors de la r√©cup√©ration des comptes: $($_.Exception.Message)" -ForegroundColor Red
        }

        Write-Host "`n4Ô∏è‚É£ Suppression de l'utilisateur (devrait supprimer le compte bancaire):" -ForegroundColor Cyan
        try {
            $deleteResponse = Invoke-RestMethod -Uri "http://localhost:8082/api/users/$userId" -Method Delete
            Write-Host ($deleteResponse | ConvertTo-Json) -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur lors de la suppression: $($_.Exception.Message)" -ForegroundColor Red
        }

        Write-Host "`n5Ô∏è‚É£ V√©rification que le compte bancaire a √©t√© supprim√©:" -ForegroundColor Cyan
        try {
            $checkAccount = Invoke-RestMethod -Uri "http://localhost:8081/api/accounts/user/$userId" -Method Get
            Write-Host ($checkAccount | ConvertTo-Json) -ForegroundColor Yellow
        } catch {
            Write-Host "‚úÖ Compte bancaire correctement supprim√©" -ForegroundColor Green
        }
    }
} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation de l'utilisateur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚úÖ Tests termin√©s!" -ForegroundColor Green
Write-Host "üåê Services disponibles:" -ForegroundColor Cyan
Write-Host "   - User Service: http://localhost:8080/api/" -ForegroundColor White
Write-Host "   - Account Service: http://localhost:8081/api/" -ForegroundColor White